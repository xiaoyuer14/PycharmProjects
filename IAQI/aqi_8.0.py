"""	功能：AQI计算	日期：25/01/2019	版本： 8.0	Pandas		一个强大的分析1结构化数据的工具集		基础是NumPy，提供了高性能矩阵的运算		应用于数据挖掘，数据分析			如学生成绩分析，股票数据分析等		提供了数据清洗功能		Series			类似一维数组的对象			通过list构建Series				ser_obj = pd.Series(range(10))			由数据和索引组成				索引在左，数据在右				索引是自动创建的			获取数据和索引				ser_obj.index, ser_obj.values			预览数据				ser_obj.head(n) 头部多少条				ser_obj.tail(n) 尾部多少条			通过索引获取数据				ser_obj[idx]			索引与数据的对应关系仍保存在数组运算的结果中			通过dict构建Series			name属性				ser_obj.name, ser_obj.index.name		DataFrame			类似多为数组或表格数据			每列数据可以是不同的类型			索引包括列索引和行索引			操作				列索引					df_obj['label']				不连续索引					df_obj[['label1', 'label2']]			排序				sort_index 索引排序					对DataFrame操作时注意轴方向				按值排序					sort_values(by = 'label')			常用的统计计算				sum，mean，max，min...				axis=0 按列统计， axix=1按行统计				skipna 排除缺失值，默认是True				idmax，idmin，cumsum			统计描述				describe 产生多个统计数据				count               非NA值得数量				describe            针对Series或各DataFrame列计算汇总统计				min、max            计算最小值和最大值				argmin、argmax      计算能够获得到最大值和最小值的索引位置（整数）				idxmin 、idxmax     计算能够获取到最小值和最大值的索引位置				quantile            计算样本的分位数（0到1）				sum                 值得总和				mean                值得平均数				median              值得算数中位数（50%分位数）				mad                 根据平均分值判断绝对平均离差				var                 样本值的方差				std                 样本值的标准差				skew                样本值的偏度（三阶矩）				kurt                样本值的峰度（四阶矩）				cumsum              样本值的累积和				cummin、cummax      样本值得累计最大值和累计最小值				cumprod             样本值得累计积				diff                计算一阶差分（对时间序列很有用）				pct_change          计算百分数变化"""import pandas as pddef main():	aqi_data = pd.read_csv('citys_aqi.csv')	print(aqi_data.info())	print(aqi_data.head(5))	# 基本统计	print('AQI最大值：', aqi_data['AQI'].max())	print('AQI最小值：', aqi_data['AQI'].min())	print('AQI均值：', aqi_data['AQI'].mean())	# top10	top10_citys = aqi_data.sort_values(by=['AQI']).head(10)	print('空气质量最好的10各城市：')	print(top10_citys)	# bottom10	bottom10_citys = aqi_data.sort_values(by=['AQI'], ascending=False).head(10)	print('空气质量最差的10各城市：')	print(bottom10_citys)	# 保存成csv	top10_citys.to_csv('top10_aqi.csv', index=False)	bottom10_citys.to_csv('bottom10_aqi.csv', index=False)if __name__ == '__main__':	main()