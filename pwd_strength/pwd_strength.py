"""	输入密码，符合强度，保存密码到文件	读取文件中的密码"""class PasswardTool:	"""		密码工具类	"""	def __init__(self, password):		self.password = password		self.strength_level = 0	def check_number_exist(self):		has_letter = False		for c in self.password:			if c.isnumeric():				has_letter = True				break		return has_letter	def process_password(self):		# 规则1：密码长度大于8		if len(self.password) >= 8:			self.strength_level += 1		else:			print("密码长度要求至少8位")		# 规则2： 包含数字		if self.check_number_exist():			self.strength_level += 1		else:			print("密码要求包含数字")		# 规则3： 包含数字		if self.check_letter_exist():			self.strength_level += 1		else:			print("密码要求包含字母")	def check_letter_exist(self):		has_number = False		for c in self.password:			if c.isalpha():				has_number = True				break		return has_numberclass FileTool:	"""		wenjian	"""	def __init__(self, filepath):		self.filepath = filepath	def write_to_file(self, line):		file = open(self.filepath, 'a')		file.write(line)		# file.write(line + self.password + '\n')		file.close()	def read_from_file(self):		f = open(self.filepath, 'r')		lines = f.readlines()		f.close()		return linesdef main():	try_time = 2	file_path = 'password_save.txt'	file_tool = FileTool(file_path)	while try_time > 0:		password = input("请输入密码：")		# 实例化密码工具对象		password_tool = PasswardTool(password)		password_tool.process_password()		txt = "尝试第{}次，密码强度:{},密码：{}\n".format(try_time, password_tool.strength_level, password)		file_tool.write_to_file(txt)		if password_tool.strength_level == 3:			print('密码强度合格,设置成功')			break		else:			print('密码强度不合格')			print()			try_time -= 1	if try_time <= 0:		print('尝试次数过多,密码设置失败')	# f = open('password_save.txt', "r")	# content = f.read()	# print(content)	# line = f.readline()	# print(line)	# line = f.readline()	# print(line)	# line = f.readline()	# print(line)	# line = f.readline()	# print(line)	# line = f.readline()	# print(line)	# lines = f.readlines()	# for line in lines:	# for line in f:	# 	print("read:{}".format(line))	#	# f.close	lines = file_tool.read_from_file()	print(lines)if __name__ == '__main__':	main()